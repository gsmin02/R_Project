col = "skyblue")
lines(density(numeric_df[["Avg_Item_Price_USD"]]),
col = "brown", lwd = 2)
# Carbon_Emissions_tCO2e
hist(numeric_df[["Carbon_Emissions_tCO2e"]],
freq = FALSE,
main = "Carbon_Emissions_tCO2e",
col = "skyblue")
lines(density(numeric_df[["Carbon_Emissions_tCO2e"]]),
col = "brown", lwd = 2)
# Water_Usage_Million_Litres
hist(numeric_df[["Water_Usage_Million_Litres"]],
freq = FALSE,
main = "Water_Usage_Million_Litres",
col = "skyblue")
lines(density(numeric_df[["Water_Usage_Million_Litres"]]),
col = "brown", lwd = 2)
# Avg_Item_Price_USD
hist(numeric_df[["Avg_Item_Price_USD"]],
freq = FALSE,
main = "Avg_Item_Price_USD",
xlab = "Avg_Item_Price_USD",
col = "skyblue")
lines(density(numeric_df[["Avg_Item_Price_USD"]]),
col = "brown", lwd = 2)
# Avg_Item_Price_USD
hist(numeric_df[["Avg_Item_Price_USD"]],
freq = FALSE,
main = "평균 제품 가격(달러)",
xlab = "Avg_Item_Price_USD",
col = "skyblue")
lines(density(numeric_df[["Avg_Item_Price_USD"]]),
col = "brown", lwd = 2)
# Carbon_Emissions_tCO2e
hist(numeric_df[["Carbon_Emissions_tCO2e"]],
freq = FALSE,
main = "탄소 배출량",
xlab = "Carbon_Emissions_tCO2e",
col = "skyblue")
lines(density(numeric_df[["Carbon_Emissions_tCO2e"]]),
col = "brown", lwd = 2)
# Water_Usage_Million_Litres
hist(numeric_df[["Water_Usage_Million_Litres"]],
freq = FALSE,
main = "물 사용량",
xlab = "Water_Usage_Million_Litres",
col = "skyblue")
lines(density(numeric_df[["Water_Usage_Million_Litres"]]),
col = "brown", lwd = 2)
numeric_df <- db_data[sapply(db_data, is.numeric)]
features <- c(
"Sustainability_Score",
"Carbon_Emissions_tCO2e",
"Transparency_Index"
)
# Avg_Item_Price_USD
hist(numeric_df[["Avg_Item_Price_USD"]],
freq = FALSE,
main = "평균 제품 가격(달러)",
xlab = "Avg_Item_Price_USD",
col = "skyblue")
lines(density(numeric_df[["Avg_Item_Price_USD"]]),
col = "brown", lwd = 2)
# Avg_Item_Price_USD
hist(db_data[["Avg_Item_Price_USD"]],
freq = FALSE,
main = "평균 제품 가격(달러)",
xlab = "Avg_Item_Price_USD",
col = "skyblue")
lines(density(numeric_df[["Avg_Item_Price_USD"]]),
col = "brown", lwd = 2)
# Avg_Item_Price_USD
hist(db_data[["Avg_Item_Price_USD"]],
freq = FALSE,
main = "평균 제품 가격(달러)",
xlab = "Avg_Item_Price_USD",
col = "skyblue")
lines(density(db_data[["Avg_Item_Price_USD"]]),
col = "brown", lwd = 2)
# true_cost_fast_fashion -> tcff 약자로 변경
tcff_db <- dbConnect(RMySQL::MySQL(),
host = "localhost",
port = 3306,
dbname = "db_r_202112401",
user = "root",
password = "1100")
# 데이터 분석 활용할 데이터 불러오기
db_data <- dbGetQuery(tcff_db, paste0("SELECT * FROM ", table_name))
# db 연결 해제
dbDisconnect(tcff_db)
# Avg_Item_Price_USD
hist(db_data[["Avg_Item_Price_USD"]],
freq = FALSE,
main = "평균 제품 가격(달러)",
xlab = "Avg_Item_Price_USD",
col = "skyblue")
lines(density(db_data[["Avg_Item_Price_USD"]]),
col = "brown", lwd = 2)
# Avg_Item_Price_USD
hist(db_data["Avg_Item_Price_USD"],
freq = FALSE,
main = "평균 제품 가격(달러)",
xlab = "Avg_Item_Price_USD",
col = "skyblue")
numeric_df <- db_data[sapply(db_data, is.numeric)]
# Avg_Item_Price_USD
hist(numeric_df["Avg_Item_Price_USD"],
freq = FALSE,
main = "평균 제품 가격(달러)",
xlab = "Avg_Item_Price_USD",
col = "skyblue")
# Avg_Item_Price_USD
hist(numeric_df[["Avg_Item_Price_USD"]],
freq = FALSE,
main = "평균 제품 가격(달러)",
xlab = "Avg_Item_Price_USD",
col = "skyblue")
lines(density(numeric_df[["Avg_Item_Price_USD"]]),
col = "brown", lwd = 2)
print(head(numeric_df[["Avg_Item_Price_USD"]]))
# Avg_Item_Price_USD
hist(numeric_df[["Avg_Item_Price_USD"]],
main = "평균 제품 가격(달러)",
xlab = "Avg_Item_Price_USD",
col = "skyblue")
lines(density(numeric_df[["Avg_Item_Price_USD"]]),
col = "brown", lwd = 2)
# Avg_Item_Price_USD
hist(numeric_df[["Avg_Item_Price_USD"]],
main = "평균 제품 가격(달러)",
xlab = "Avg_Item_Price_USD",
col = "skyblue")
# Carbon_Emissions_tCO2e
hist(numeric_df[["Carbon_Emissions_tCO2e"]],
main = "탄소 배출량",
xlab = "Carbon_Emissions_tCO2e",
col = "skyblue")
# Water_Usage_Million_Litres
hist(numeric_df[["Water_Usage_Million_Litres"]],
main = "물 사용량",
xlab = "Water_Usage_Million_Litres",
col = "skyblue")
# 데이터 변환
numeric_df <- db_data[sapply(db_data, is.numeric)]
# id를 제외한 데이터 불러오기
numeric_df <- numeric_df[, !names(numeric_df) == "id"]
print(head(numeric_df[["Avg_Item_Price_USD"]]))
# Avg_Item_Price_USD
hist(numeric_df[["Avg_Item_Price_USD"]],
main = "평균 제품 가격(달러)",
xlab = "Avg_Item_Price_USD",
col = "skyblue")
# Carbon_Emissions_tCO2e
hist(numeric_df[["Carbon_Emissions_tCO2e"]],
main = "탄소 배출량",
xlab = "Carbon_Emissions_tCO2e",
col = "skyblue")
# Water_Usage_Million_Litres
hist(numeric_df[["Water_Usage_Million_Litres"]],
main = "물 사용량",
xlab = "Water_Usage_Million_Litres",
col = "skyblue")
# Avg_Item_Price_USD
hist(numeric_df[["Avg_Item_Price_USD"]],
freq = FALSE,
main = "평균 제품 가격(달러)",
xlab = "Avg_Item_Price_USD",
col = "skyblue")
lm_model <- lm(numeric_df[["Sustainability_Score"]] ~ ., data = numeric_df)
print(summary(lm_model))
coefficients <- coef(lm_model)
coefficients_no_intercept <- coefficients[!names(coefficients) %in% "(Intercept)"]
coeff_df <- data.frame(
Feature = names(coefficients_no_intercept),
Coefficient = as.numeric(coefficients_no_intercept)
)
coeff_df$Feature <- factor(coeff_df$Feature, levels = coeff_df$Feature[order(abs(coeff_df$Coefficient), decreasing = FALSE)])
p_coeffs <- ggplot(coeff_df, aes(x = Feature, y = Coefficient, fill = Coefficient > 0)) +
geom_bar(stat = "identity") + # stat = "identity"는 y축 값이 데이터 그대로임을 의미
coord_flip() + # 막대를 수평으로 표시하여 라벨 읽기 용이하게 함
scale_fill_manual(values = c("TRUE" = "darkgreen", "FALSE" = "darkred"), # 양수/음수 계수에 따라 색상 구분
labels = c("긍정적 영향", "부정적 영향")) +
labs(title = "지속가능성 점수 예측 모델의 회귀 계수",
x = "특성",
y = "회귀 계수 값",
fill = "영향 방향") +
theme_minimal() +
theme(legend.position = "bottom") # 범례 위치 설정
print(p_coeffs)
coefficients <- coef(lm_model)
coefficients_filtered <- coefficients[!names(coefficients) %in% c("(Intercept)", "Sustainability_Score")]
coeff_df <- data.frame(
Feature = names(coefficients_filtered),
Coefficient = as.numeric(coefficients_filtered)
)
coeff_df$Feature <- factor(coeff_df$Feature, levels = coeff_df$Feature[order(abs(coeff_df$Coefficient), decreasing = FALSE)])
p_coeffs <- ggplot(coeff_df, aes(x = Feature, y = Coefficient, fill = Coefficient > 0)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_manual(values = c("TRUE" = "darkgreen", "FALSE" = "darkred"),
labels = c("긍정적 영향", "부정적 영향")) +
labs(title = "지속가능성 점수 예측 모델의 회귀 계수",
x = "특성",
y = "회귀 계수 값",
fill = "영향 방향") +
theme_minimal() +
theme(legend.position = "bottom")
print(p_coeffs)
coefficients <- coef(lm_model)
coefficients_filtered <- coefficients[!names(coefficients) == c("(Intercept)", "Sustainability_Score")]
coefficients_filtered <- coefficients[, !names(coefficients) == c("(Intercept)", "Sustainability_Score")]
coefficients_filtered <- coefficients[, !names(coefficients) == "(Intercept)", !names(coefficients) == "Sustainability_Score"]
coefficients_filtered <- coefficients[, !names(coefficients) == "(Intercept)" && !names(coefficients) == "Sustainability_Score"]
coefficients_filtered <- coefficients[, !names(coefficients) == "(Intercept)" || !names(coefficients) == "Sustainability_Score"]
coefficients_filtered <- coefficients[, !names(coefficients) == "(Intercept)"]
coefficients <- coef(lm_model)
coefficients_filtered <- coefficients[, !names(coefficients) == "(Intercept)"]
lm_model <- lm(numeric_df[["Sustainability_Score"]] ~ ., data = numeric_df)
# print(summary(lm_model))
coefficients <- coef(lm_model)
coefficients_filtered <- coefficients[, !names(coefficients) == "Sustainability_Score"]
coefficients <- coef(lm_model)
coefficients_filtered <- coefficients[, !names(coefficients) == "Sustainability_Score"]
coefficients <- coef(lm_model)
coefficients_no_intercept <- coefficients[!names(coefficients) == "(Intercept)"]
feature_names_for_plot <- names(model_df_clean)[!names(model_df_clean) == "Sustainability_Score"]
coefficients <- coef(lm_model)
coefficients_no_intercept <- coefficients[!names(coefficients) == "(Intercept)"]
feature_names_for_plot <- names(numeric_df)[!names(numeric_df) == "Sustainability_Score"]
coeff_df <- data.frame(
Feature = names(coefficients_no_intercept),
Coefficient = as.numeric(coefficients_no_intercept)
)
coeff_df$Feature <- factor(coeff_df$Feature, levels = coeff_df$Feature[order(abs(coeff_df$Coefficient), decreasing = FALSE)])
p_coeffs <- ggplot(coeff_df, aes(x = Feature, y = Coefficient, fill = Coefficient > 0)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_manual(values = c("TRUE" = "darkgreen", "FALSE" = "darkred"),
labels = c("긍정적 영향", "부정적 영향")) +
labs(title = "지속가능성 점수 예측 모델의 회귀 계수",
x = "특성",
y = "회귀 계수 값",
fill = "영향 방향") +
theme_minimal() +
theme(legend.position = "bottom")
print(p_coeffs)
coefficients_no_intercept <- coefficients[!names(coefficients) == "(Intercept)"]
coefficients_no_intercept <- coefficients_no_intercept[!names(numeric_df) == "Sustainability_Score"]
coeff_df <- data.frame(
Feature = names(coefficients_no_intercept),
Coefficient = as.numeric(coefficients_no_intercept)
)
coeff_df$Feature <- factor(coeff_df$Feature, levels = coeff_df$Feature[order(abs(coeff_df$Coefficient), decreasing = FALSE)])
p_coeffs <- ggplot(coeff_df, aes(x = Feature, y = Coefficient, fill = Coefficient > 0)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_manual(values = c("TRUE" = "darkgreen", "FALSE" = "darkred"),
labels = c("긍정적 영향", "부정적 영향")) +
labs(title = "지속가능성 점수 예측 모델의 회귀 계수",
x = "특성",
y = "회귀 계수 값",
fill = "영향 방향") +
theme_minimal() +
theme(legend.position = "bottom")
print(p_coeffs)
lm_model <- lm(numeric_df[["Sustainability_Score"]]
~ numeric_df[["Avg_Item_Price_USD"]]
+ numeric_df[["Carbon_Emissions_tCO2e"]]
+ numeric_df[["Water_Usage_Million_Litres"]]
, data = numeric_df)
# print(summary(lm_model))
coefficients <- coef(lm_model)
coefficients_no_intercept <- coefficients[!names(coefficients) == "(Intercept)"]
coeff_df <- data.frame(
Feature = names(coefficients_no_intercept),
Coefficient = as.numeric(coefficients_no_intercept)
)
coeff_df$Feature <- factor(coeff_df$Feature, levels = coeff_df$Feature[order(abs(coeff_df$Coefficient), decreasing = FALSE)])
p_coeffs <- ggplot(coeff_df, aes(x = Feature, y = Coefficient, fill = Coefficient > 0)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_manual(values = c("TRUE" = "darkgreen", "FALSE" = "darkred"),
labels = c("긍정적 영향", "부정적 영향")) +
labs(title = "지속가능성 점수 예측 모델의 회귀 계수",
x = "특성",
y = "회귀 계수 값",
fill = "영향 방향") +
theme_minimal() +
theme(legend.position = "bottom")
print(p_coeffs)
lm_model <- lm(Sustainability_Score
~ Avg_Item_Price_USD
+ Carbon_Emissions_tCO2e
+ Water_Usage_Million_Litres
, data = numeric_df)
coefficients <- coef(lm_model)
coefficients_no_intercept <- coefficients[!names(coefficients) == "(Intercept)"]
coeff_df <- data.frame(
Feature = names(coefficients_no_intercept),
Coefficient = as.numeric(coefficients_no_intercept)
)
coeff_df$Feature <- factor(coeff_df$Feature, levels = coeff_df$Feature[order(abs(coeff_df$Coefficient), decreasing = FALSE)])
p_coeffs <- ggplot(coeff_df, aes(x = Feature, y = Coefficient, fill = Coefficient > 0)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_manual(values = c("TRUE" = "darkgreen", "FALSE" = "darkred"),
labels = c("긍정적 영향", "부정적 영향")) +
labs(title = "지속가능성 점수 예측 모델의 회귀 계수",
x = "특성",
y = "회귀 계수 값",
fill = "영향 방향") +
theme_minimal() +
theme(legend.position = "bottom")
print(p_coeffs)
features <- c(
"Monthly_Production_Tonnes",
"Avg_Item_Price_USD",
"Carbon_Emissions_tCO2e",
"Water_Usage_Million_Litres",
"Sustainability_Score"
)
pairs(numeric_df[, features],
main = "산점도 행렬",
cex = 0.2,
col = "blue",
)
lm_model <- lm(Sustainability_Score
~ Monthly_Production_Tonnes
+ Avg_Item_Price_USD
+ Carbon_Emissions_tCO2e
+ Water_Usage_Million_Litres
, data = numeric_df)
coefficients <- coef(lm_model)
coefficients_no_intercept <- coefficients[!names(coefficients) == "(Intercept)"]
coeff_df <- data.frame(
Feature = names(coefficients_no_intercept),
Coefficient = as.numeric(coefficients_no_intercept)
)
coeff_df$Feature <- factor(coeff_df$Feature, levels = coeff_df$Feature[order(abs(coeff_df$Coefficient), decreasing = FALSE)])
p_coeffs <- ggplot(coeff_df, aes(x = Feature, y = Coefficient, fill = Coefficient > 0)) +
geom_bar(stat = "identity") +
coord_flip() +
scale_fill_manual(values = c("TRUE" = "darkgreen", "FALSE" = "darkred"),
labels = c("긍정적 영향", "부정적 영향")) +
labs(title = "지속가능성 점수 예측 모델의 회귀 계수",
x = "특성",
y = "회귀 계수 값",
fill = "영향 방향") +
theme_minimal() +
theme(legend.position = "bottom")
print(p_coeffs)
print(summary(lm_model))
lm_model <- lm(Sustainability_Score
~ .
, data = numeric_df)
print(summary(lm_model))
coeff_df <- coef(lm_model)
# 절편 제거
coeff_df <- coeff_df[!names(coeff_df) == "(Intercept)"]
# 타겟 특성 제거
coeff_df <- coeff_df[!names(coeff_df) == "Sustainability_Score"]
# 가로 막대 그래프
p_all_coeffs <- ggplot(coeff_df, aes(x = Feature, y = Coefficient, fill = Coefficient > 0)) +
geom_bar(stat = "identity", color = "black", size = 0.2) + # 막대 그래프 그리기
coord_flip() + # 막대를 수평(가로)으로 표시
scale_fill_manual(values = c("TRUE" = "darkgreen", "FALSE" = "darkred"), # 양수/음수 계수 색상 구분
labels = c("긍정적 영향", "부정적 영향")) +
labs(title = "지속가능성 점수 예측 모델의 회귀 계수",
x = "특성",
y = "회귀 계수 값",
fill = "영향 방향") +
theme_minimal() +
theme(
legend.position = "bottom",
axis.text.y = element_text(size = 9),
plot.title = element_text(hjust = 0.5)
)
coeff_filtered <- coef(lm_model)
coeff_filtered <- coeff_filtered[!names(coeff_filtered) == "(Intercept)"]
coeff_df_for_plot <- data.frame(
Feature = names(coeff_filtered),
Coefficient = as.numeric(coeff_filtered)
)
coeff_df_for_plot$Feature <- factor(coeff_df_for_plot$Feature,
levels = coeff_df_for_plot$Feature[order(abs(coeff_df_for_plot$Coefficient), decreasing = FALSE)])
p_all_coeffs <- ggplot(coeff_df_for_plot, aes(x = Feature, y = Coefficient, fill = Coefficient > 0)) +
geom_bar(stat = "identity", color = "black", linewidth = 0.2) +
coord_flip() +
scale_fill_manual(values = c("TRUE" = "darkgreen", "FALSE" = "darkred"),
labels = c("긍정적 영향", "부정적 영향")) +
labs(title = "지속가능성 점수 예측 모델의 회귀 계수",
x = "특성",
y = "회귀 계수 값",
fill = "영향 방향") +
theme_minimal() +
theme(
legend.position = "bottom",
axis.text.y = element_text(size = 9),
plot.title = element_text(hjust = 0.5)
)
print(p_all_coeffs)
p_all_coeffs <- ggplot(coeff_df_for_plot, aes(x = Feature, y = Coefficient, fill = Coefficient > 0)) +
geom_bar(stat = "identity", fill="skyblue") +
coord_flip() +
labs(title = "지속가능성 점수 예측 모델의 회귀 계수",
x = "특성",
y = "회귀 계수 값",
fill = "영향 방향") +
theme_minimal() +
theme(
legend.position = "bottom",
axis.text.y = element_text(size = 9),
plot.title = element_text(hjust = 0.5)
)
print(p_all_coeffs)
p_all_coeffs <- ggplot(coeff_df_for_plot, aes(x = Feature, y = Coefficient, fill = Coefficient > 0)) +
geom_bar(stat = "identity", fill="skyblue") +
coord_flip() +
labs(title = "지속가능성 점수 예측 모델의 회귀 계수",
x = "특성",
y = "회귀 계수 값",
fill = "영향 방향")
print(p_all_coeffs)
p_all_coeffs <- ggplot(coeff_df_for_plot,
aes(x = Feature, y = Coefficient)) +
geom_bar(stat = "identity", fill="skyblue") +
coord_flip() +
labs(title = "지속가능성 점수 예측 모델의 회귀 계수",
x = "특성",
y = "회귀 계수 값",
fill = "영향 방향")
print(p_all_coeffs)
coef <- coef(lm_model)
coef <- coef[!names(coef) == "(Intercept)"]
coef_plot <- data.frame(
Feature = names(coef),
Coefficient = as.numeric(coef)
)
coef_plot$Feature <- factor(coef_plot$Feature,
levels = coef_plot$Feature[order(abs(coef_plot$Coefficient), decreasing = FALSE)])
p_all_coeffs <- ggplot(coef_plot,
aes(x = Feature, y = Coefficient)) +
geom_bar(stat = "identity", fill="skyblue") +
coord_flip() +
labs(title = "예측 모델 회귀 계수",
x = "특성",
y = "회귀 계수 값")
print(p_all_coeffs)
coef <- coef(lm_model)
coef <- coef[!names(coef) == "(Intercept)"]
coef_plot <- data.frame(
Feature = names(coef),
Coefficient = as.numeric(coef)
)
coef_plot$Feature <- factor(coef_plot$Feature,
levels = coef_plot$Feature[order(abs(coef_plot$Coefficient), decreasing = FALSE)])
weight_plot <- ggplot(coef_plot,
aes(x = Feature, y = Coefficient)) +
geom_bar(stat = "identity", fill="skyblue") +
coord_flip() +
labs(title = "예측 모델 회귀 계수",
x = "특성",
y = "회귀 계수 값")
print(weight_plot)
summary(csv_data)
heatmap(corr_matrix_m,
col = colorRampPalette(c("blue", "white", "red"))(256),
main = "상관관계 히트맵",
symm = TRUE,
Colv = NA,
Rowv = NA,
cexRow = 0.8,
cexCol = 0.8,
margins = c(8, 8))
pairs(numeric_df[, features],
main = "산점도 행렬",
cex = 0.2,
col = "blue",
)
hist(numeric_df[["Avg_Item_Price_USD"]],
main = "평균 제품 가격(달러)",
xlab = "Avg_Item_Price_USD",
col = "skyblue")
# Carbon_Emissions_tCO2e
hist(numeric_df[["Carbon_Emissions_tCO2e"]],
main = "탄소 배출량",
xlab = "Carbon_Emissions_tCO2e",
col = "skyblue")
# Water_Usage_Million_Litres
hist(numeric_df[["Water_Usage_Million_Litres"]],
main = "물 사용량",
xlab = "Water_Usage_Million_Litres",
col = "skyblue")
print(weight_plot)
print(str(db_data))
heatmap(corr_matrix_m,
col = colorRampPalette(c("blue", "white", "red"))(256),
main = "상관관계 히트맵",
symm = TRUE,
Colv = NA,
Rowv = NA,
cexRow = 0.8,
cexCol = 0.8,
margins = c(8, 8))
pairs(numeric_df[, features],
main = "산점도 행렬",
cex = 0.2,
col = "blue",
)
print(summary(lm_model))
print(coef(lm_model))
print(weight_plot)
